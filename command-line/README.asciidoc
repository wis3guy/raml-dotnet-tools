= RAML Generator - Command Line Tools

:source-highlighter: prettify

:!numbered:

The RAML Generator allows developers to easily generate a client proxy to consume an API, or ASP.NET MVC 6 or WebAPI 2 scaffold based on a RAML definition. See http://raml.org for information on RAML (RESTful API Markup Language).

This is provided as a command line tool.

== Prerequisites

* .NET Framework 4.5 or higher
* https://support.microsoft.com/en-us/help/3179560/update-for-visual-c-2013-and-visual-c-redistributable-package[Visual C\+\+ 2013 and Visual C++ Redistributable Package x86] - http://download.microsoft.com/download/0/5/6/056dcda9-d667-4e27-8001-8a0c6971d6b1/vcredist_x86.exe[direct download]

- Supported languages: C# (other languages indirectly)

== Installation

* Install "Visual C\+\+ 2013 and Visual C++ Redistributable Package 32 bits (x86)"
* Install .NET Framework 4.5 or higher if not present
* Unzip the file and use from the command line.

== Supported Scenarios

=== API Client Code from a RAML Definition

You can generate API client code from a RAML definition, which lets client applications consume existing APIs from a RAML definition.

[source, bash]
----
RAMLGen client -s c:\path\to\source.raml;
----

This will create a "generated" folder under the current directory with a single C# (.cs) file containing all the code for a client proxy that is ready to consume the specified API.

These are all the modifiers you can use:

  -s, --source         Required. RAML source URL or file.

  -n, --namespace      Target namespace

  -d, --destination    Target folder

  -t, --templates      Templates folder

  -o, --overwrite      Overwrite files (defaults to not overwrite)

Or type *RAMLGen client help* to get the options and usage examples.

==== Usage scenarios

Minimal:
[source, bash]
----
  RAMLGen client -s c:\path\to\source.raml
----

Generate WebApi 2 code:
[source, bash]
----
  RAMLGen client -s source.raml -w
----

Specify destination folder:
[source, bash]
----
  RAMLGen client -d c:\path\to\generate\ -s source.raml
----

Specify namespace:
[source, bash]
----
  RAMLGen client -n My.Name.Space -s source.raml
----

Use custom template:
[source, bash]
----
  RAMLGen client -t MyCustomTemplate.t4 -s source.raml
----

For more info on how to use the client proxy refer to https://github.com/mulesoft-labs/raml-dotnet-tools#using-the-api-client-with-the-movies-sample

Code is generated using T4, you can customize the templates, for more info refer to https://github.com/mulesoft-labs/raml-dotnet-tools#customizing-the-generated-code


=== ASP .NET Implementation from a RAML Definition

You can generate an ASP .NET MVC 6 implementation from a RAML definition.

[source, bash]
----
RAMLGen server -s c:\path\to\source.raml;
----

This implementation includes controller classes and route registrations that map to the resources exposed in the RAML definition and also includes model classes for their representation. The model classes are generated from the available RAML types or JSON schemas.
This example will create a "generated" folder where base controllers, their interfaces and the models are placed, and a "Controllers" folder where the controllers for the implementation are generated.

For more info on how to use the generated code refer to https://github.com/mulesoft-labs/raml-dotnet-tools#implementing-a-controller-in-aspnet-web-api

These are all the modifiers you can use:

  -w, --webapi         target WebApi 2 (defaults to ASP.NET MVC 6)

  -a, --async          Use async methods (defaults to not use async)

  -s, --source         Required. RAML source URL or file.

  -n, --namespace      Target namespace

  -d, --destination    Target folder

  -t, --templates      Templates folder

  -o, --overwrite      Overwrite files (defaults to not overwrite)

Or type *RAMLGen server help* to get a list of options and usage examples.

==== Usage scenarios

Minimal:
[source, bash]
----
  RAMLGen server -s c:\path\to\source.raml
----

Generate WebApi 2 code:
[source, bash]
----
  RAMLGen server -s source.raml -w
----

Specify destination folder:
[source, bash]
----
  RAMLGen server -d c:\path\to\generate\ -s source.raml
----

Specify namespace:
[source, bash]
----
  RAMLGen server -n My.Name.Space -s source.raml
----

Code is generated using T4, you can customize the templates, for more info refer to https://github.com/mulesoft-labs/raml-dotnet-tools#customizing-the-generated-code


==== ASP .NET WebAPI 2 Implementation from a RAML Definition

You can generate an ASP .NET WebAPI 2 implementation from a RAML definition.

[source, bash]
----
RAMLGen server -w -s c:\path\to\source.raml;
----

This generates the same files as the previous options but the code implements a WebAPI 2 solution instead.

